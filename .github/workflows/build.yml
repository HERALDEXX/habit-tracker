name: Build for Windows, macOS and Linux

on:
  push:
    tags:
      - "v*" # Trigger on version tags
  workflow_dispatch: # Allow manual triggering

env:
  APP_VERSION: ${{ github.ref_name }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            platform_name: windows
          - os: ubuntu-latest
            platform_name: linux
          - os: macos-latest
            platform_name: macos

    steps:
      - uses: actions/checkout@v3

      - name: Set version
        run: |
          if [[ -z "${{ env.APP_VERSION }}" ]]; then
            echo "APP_VERSION=v2.2.0" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system dependencies (Linux)
        if: matrix.platform_name == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk python3-dev
          python -c "import tkinter" || (echo "tkinter import failed" && exit 1)

      - name: Install system dependencies (macOS)
        if: matrix.platform_name == 'macos'
        run: |
          brew install python@3.12
          brew link --overwrite --force python@3.12
          echo "/usr/local/opt/python@3.12/bin" >> $GITHUB_PATH
          brew install tcl-tk
          python -m pip install --upgrade pip
          export PATH="/usr/local/opt/tcl-tk/bin:$PATH"
          export LDFLAGS="-L/usr/local/opt/tcl-tk/lib"
          export CPPFLAGS="-I/usr/local/opt/tcl-tk/include"
          python -c "import tkinter" || (echo "tkinter import failed" && exit 1)

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install "setuptools<81" pyinstaller
          if [ -f "requirements.txt" ]; then
            python -m pip install -r requirements.txt
          else
            python -m pip install colorama matplotlib pillow
          fi
        shell: bash

      - name: Test tkinter import
        run: |
          python -c "import tkinter" || (echo "tkinter import failed" && exit 1)
          python -c "import matplotlib" || (echo "matplotlib import failed" && exit 1)
          python -c "from PIL import Image" || (echo "PIL import failed" && exit 1)
        shell: bash

      - name: Build executable (Windows)
        if: matrix.platform_name == 'windows'
        run: pyinstaller --clean --onefile --windowed --icon assets/icon.ico --name "heraldexx-habit-tracker-${{ env.APP_VERSION }}" --add-data "assets;assets" --hidden-import matplotlib --hidden-import matplotlib.backends.backend_agg --hidden-import tkinter --hidden-import PIL --hidden-import customtkinter --hidden-import darkdetect --hidden-import PIL._tkinter_finder --collect-submodules numpy main.py
        shell: cmd

      - name: Build executable (Unix)
        if: matrix.platform_name != 'windows'
        run: |
          pyinstaller --clean --onefile \
            --windowed \
            --icon assets/icon.png \
            --name "heraldexx-habit-tracker-${{ env.APP_VERSION }}-${{ matrix.platform_name }}" \
            --add-data "assets:assets" \
            --hidden-import matplotlib \
            --hidden-import matplotlib.backends.backend_agg \
            --hidden-import tkinter \
            --hidden-import PIL \
            --hidden-import customtkinter \
            --hidden-import darkdetect \
            --hidden-import PIL._tkinter_finder \
            --collect-submodules numpy \
            main.py
        shell: bash

      - name: Set executable permissions (Unix)
        if: matrix.platform_name != 'windows'
        run: chmod +x dist/heraldexx-habit-tracker-${{ env.APP_VERSION }}-${{ matrix.platform_name }}
        shell: bash

      - name: Upload artifact (Windows)
        if: matrix.platform_name == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: heraldexx-habit-tracker-${{ env.APP_VERSION }}-windows
          path: dist/heraldexx-habit-tracker-${{ env.APP_VERSION }}-windows.exe

      - name: Upload artifact (Unix)
        if: matrix.platform_name != 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: heraldexx-habit-tracker-${{ env.APP_VERSION }}-${{ matrix.platform_name }}
          path: dist/heraldexx-habit-tracker-${{ env.APP_VERSION }}-${{ matrix.platform_name }}

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: heraldexx-habit-tracker-${{ env.APP_VERSION }}-windows
          path: dist

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: heraldexx-habit-tracker-${{ env.APP_VERSION }}-linux
          path: dist

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: heraldexx-habit-tracker-${{ env.APP_VERSION }}-macos
          path: dist

      - name: Prepare release files
        run: |
          cd dist
          chmod +x heraldexx-habit-tracker-${{ env.APP_VERSION }}-linux heraldexx-habit-tracker-${{ env.APP_VERSION }}-macos
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
